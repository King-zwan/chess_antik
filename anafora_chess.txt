===========================================
ΑΝΑΦΟΡΑ ΠΡΟΓΡΑΜΜΑΤΟΣ ΣΚΑΚΙ ΣΕ C++
===========================================

Μάθημα: Αντικειμενοστραφής Προγραμματισμός  
Τρομπούκης Δημήτριος, Θεόφιλος Κασαπίδης

-------------------------------------------
1. Σκοπός του έργου
-------------------------------------------
Ο σκοπός της εργασίας ήταν η δημιουργία ενός διαδραστικού παιχνιδιού σκάκι σε γλώσσα C++ με χρήση αντικειμενοστραφούς προγραμματισμού . Το παιχνίδι υλοποιείται σε περιβάλλον κονσόλας και υποστηρίζει όλους τους βασικούς κανόνες του σκακιού, συμπεριλαμβανομένων των ειδικών κινήσεων όπως το ροκέ(castling, η προαγωγή 
πιονιού και το en passant.

-------------------------------------------
2. Περιγραφή Λειτουργίας
-------------------------------------------
Το πρόγραμμα ξεκινά με την εισαγωγή των ονομάτων των δύο παικτών (λευκών και μαύρων). Η σκακιέρα απεικονίζεται με χαρακτήρες ASCII και οι παίκτες κάνουν τις κινήσεις τους πληκτρολογώντας τις με μορφή "e2e4".

Κάθε κίνηση ελέγχεται ως προς την εγκυρότητά της και εφαρμόζεται αν είναι επιτρεπτή. Υπάρχει υποστήριξη για:
- Προαγωγή πιονιού με επιλογή κομματιού (Βασίλισσα, Πύργος, Ίππος, Αξιωματικός)
- En passant αιχμαλωσία
- Κίνηση ροκέ (castling)
- Έλεγχος για σαχ και ματ

Το παιχνίδι συνεχίζεται μέχρι ένας από τους δύο παίκτες να βρεθεί σε ματ.

-------------------------------------------
3. Κλάσεις και Δομή Κώδικα
-------------------------------------------

- Κλάση `pawn`, `rook`, `knight`, `bishop`, `queen`, `king`:  
  Εκπροσωπούν τα αντίστοιχα κομμάτια του σκακιού. Περιέχουν τις συντεταγμένες τους και χρησιμοποιούνται για την απεικόνιση και μετακίνηση.

- Κλάση `Board`:  
  Διαχειρίζεται την κατάσταση της σκακιέρας, την εκτύπωση της, καθώς και τους πίνακες που περιέχουν όλα τα κομμάτια. Επίσης, περιλαμβάνει μεταβλητές για το ροκέ και το en passant.

- Κλάση `player`:  
  Αντιπροσωπεύει κάθε παίκτη, κρατά pointers στα κομμάτια του, καθώς και πληροφορίες για το ποιος παίζει λευκά ή μαύρα.

- Λειτουργίες όπως `validMove`, `movePiece`, `isInCheck`, `isCheckmate`:  
  Υλοποιούν τη λογική ελέγχου εγκυρότητας κινήσεων και καταστάσεων του παιχνιδιού.

-------------------------------------------
4. Οδηγίες Εκτέλεσης
-------------------------------------------

1. Μεταγλώττιση:
   g++ -o chess-v6.cpp

2. Εκτέλεση:
   ./chess   (Linux/Mac)
   chess.exe (Windows)

3. Παράδειγμα εισαγωγής κίνησης:
   e2e4
   g8f6

Η σκακιέρα εμφανίζεται μετά από κάθε κίνηση.

-------------------------------------------
5. Παρατηρήσεις και Βελτιώσεις
-------------------------------------------

- Το παιχνίδι είναι μόνο για δύο παίκτες σε τοπικό περιβάλλον (όχι AI).
- Δεν υπάρχει αποθήκευση/φόρτωση παρτίδας.
- Δεν γίνεται έλεγχος για ισοπαλία ή επανάληψη κινήσεων.

Μελλοντικά θα μπορούσε να επεκταθεί με:
- Γραφικό περιβάλλον (GUI) με χρήση βιβλιοθήκης όπως το SFML ή Raylib
- Ενσωμάτωση υπολογιστή-αντιπάλου (AI)
- Υποστήριξη PGN (Portable Game Notation)

-------------------------------------------
6. Συμπεράσματα
-------------------------------------------
Κώδικες που φαινομενικά φαντάζουν εύκολοι στην εφαρμογή πολλές φορές καταντούν το ακριβώς αντίθετο ,είτε επειδή ο τρόπος που επιλέξαμε να τους εφαρμόσουμε είναι αυτός που τους κάνει δύσκολους ή το πιο σύνηθες, έχουμε υποτιμήσει την πραγματική δυσκολία τους.

Η εφαρμογή για το Σκάκι σε κώδικα μας έφερε πολλές φορές αντιμέτωπους με προβλήματα που δεν είχαμε υποψιαστεί ότι υπήρχαν, και σε κάποιες από αυτές δεν θα είχαμε βρει λύση αν δεν είχαμε χρησιμοποιήσει A.I. για να μας εξηγήσει πιο ήταν όντως το πρόβλημα και πιο γενικά το διαδίκτυο για να βρούμε λύσεις. 


-------------------------------------------
Τέλος αναφοράς.